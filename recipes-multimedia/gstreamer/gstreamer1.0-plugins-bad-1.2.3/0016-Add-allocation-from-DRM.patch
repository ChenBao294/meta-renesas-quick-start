From f4f0d5d94ba182f822eb6d4c940c8893b62f9c89 Mon Sep 17 00:00:00 2001
From: Andrey Gusakov <andrey.gusakov@cogentembedded.com>
Date: Thu, 12 Feb 2015 16:47:34 +0300
Subject: [PATCH 16/29] Add allocation from DRM


Signed-off-by: Andrey Gusakov <andrey.gusakov@cogentembedded.com>
---
 ext/wayland/Makefile.am      |    4 +-
 ext/wayland/gstwaylandsink.c |  142 +++++++++++++++++++++-
 ext/wayland/waylandpool.c    |  275 +++++++++++++++++++++++++++++++++++++++++-
 ext/wayland/waylandpool.h    |   19 +++
 ext/wayland/wldisplay.c      |   62 ++++++++++
 ext/wayland/wldisplay.h      |   17 +++
 6 files changed, 515 insertions(+), 4 deletions(-)

diff --git a/ext/wayland/Makefile.am b/ext/wayland/Makefile.am
index 58c1e99..e73bfc4 100644
--- a/ext/wayland/Makefile.am
+++ b/ext/wayland/Makefile.am
@@ -9,11 +9,13 @@ libgstwaylandsink_la_SOURCES =  \
 	scaler-protocol.c
 
 libgstwaylandsink_la_CFLAGS = $(GST_CFLAGS) $(GST_PLUGINS_BASE_CFLAGS) \
-                               $(WAYLAND_CFLAGS) $(GST_PLUGINS_BAD_CFLAGS)
+                               $(WAYLAND_CFLAGS) $(GST_PLUGINS_BAD_CFLAGS) \
+                               $(WAYLAND_KMS_CFLAGS)
 libgstwaylandsink_la_LIBADD = \
 	$(GST_PLUGINS_BASE_LIBS) \
 	-lgstvideo-$(GST_API_VERSION) \
 	$(WAYLAND_LIBS) \
+	$(WAYLAND_KMS_LIBS) \
 	$(top_builddir)/gst-libs/gst/wayland/libgstwayland-$(GST_API_VERSION).la
 libgstwaylandsink_la_LDFLAGS = $(GST_PLUGIN_LDFLAGS)
 libgstwaylandsink_la_LIBTOOLFLAGS = $(GST_PLUGIN_LIBTOOLFLAGS)
diff --git a/ext/wayland/gstwaylandsink.c b/ext/wayland/gstwaylandsink.c
index f33808b..20599cf 100644
--- a/ext/wayland/gstwaylandsink.c
+++ b/ext/wayland/gstwaylandsink.c
@@ -74,10 +74,14 @@ GST_DEBUG_CATEGORY (gstwayland_debug);
 static GstStaticPadTemplate sink_template = GST_STATIC_PAD_TEMPLATE ("sink",
     GST_PAD_SINK,
     GST_PAD_ALWAYS,
+#if HAVE_WAYLAND_KMS
+    GST_STATIC_CAPS (GST_VIDEO_CAPS_MAKE (CAPS))
+#else
     GST_STATIC_CAPS (GST_VIDEO_CAPS_MAKE
         ("{ BGRx, BGRA, RGBx, xBGR, xRGB, RGBA, ABGR, ARGB, RGB, BGR, "
             "RGB16, BGR16, YUY2, YVYU, UYVY, AYUV, NV12, NV21, NV16, "
             "YUV9, YVU9, Y41B, I420, YV12, Y42B, v308 }"))
+#endif
     );
 
 static void gst_wayland_sink_get_property (GObject * object,
@@ -100,6 +104,10 @@ static gboolean
 gst_wayland_sink_propose_allocation (GstBaseSink * bsink, GstQuery * query);
 static gboolean gst_wayland_sink_render (GstBaseSink * bsink,
     GstBuffer * buffer);
+#ifdef HAVE_WAYLAND_KMS
+static gboolean
+gst_wayland_sink_query (GstBaseSink * bsink, GstQuery * query);
+#endif
 
 /* VideoOverlay interface */
 static void gst_wayland_sink_videooverlay_init (GstVideoOverlayInterface *
@@ -158,6 +166,9 @@ gst_wayland_sink_class_init (GstWaylandSinkClass * klass)
   gstbasesink_class->propose_allocation =
       GST_DEBUG_FUNCPTR (gst_wayland_sink_propose_allocation);
   gstbasesink_class->render = GST_DEBUG_FUNCPTR (gst_wayland_sink_render);
+#ifdef HAVE_WAYLAND_KMS
+  gstbasesink_class->query = GST_DEBUG_FUNCPTR (gst_wayland_sink_query);
+#endif
 
   g_object_class_install_property (gobject_class, PROP_DISPLAY,
       g_param_spec_string ("display", "Wayland Display name", "Wayland "
@@ -502,7 +513,12 @@ gst_wayland_sink_set_caps (GstBaseSink * bsink, GstCaps * caps)
     goto pool_failed;
 
   structure = gst_buffer_pool_get_config (newpool);
-  gst_buffer_pool_config_set_params (structure, caps, info.size, 2, 0);
+#ifdef HAVE_WAYLAND_KMS
+  gst_structure_set (structure, "videosink_buffer_creation_request_supported",
+      G_TYPE_BOOLEAN, TRUE, NULL);
+#endif
+  gst_buffer_pool_config_set_params (structure, caps, info.size,
+      GST_WAYLAND_BUFFER_POOL_NUM, GST_WAYLAND_BUFFER_POOL_NUM);
   gst_buffer_pool_config_set_allocator (structure, NULL, &params);
   if (!gst_buffer_pool_set_config (newpool, structure))
     goto config_failed;
@@ -550,7 +566,14 @@ gst_wayland_sink_propose_allocation (GstBaseSink * bsink, GstQuery * query)
   GstCaps *caps;
   guint size;
   gboolean need_pool;
+#ifdef HAVE_WAYLAND_KMS
+  GstAllocator *allocator;
+#endif
+  GstAllocationParams params;
 
+#ifdef HAVE_WAYLAND_KMS
+  gst_allocation_params_init (&params);
+#endif
   gst_query_parse_allocation (query, &caps, &need_pool);
 
   if (caps == NULL)
@@ -588,11 +611,27 @@ gst_wayland_sink_propose_allocation (GstBaseSink * bsink, GstQuery * query)
 
     config = gst_buffer_pool_get_config (pool);
     gst_buffer_pool_config_set_params (config, caps, size, 2, 0);
+    gst_structure_set (config, "videosink_buffer_creation_request_supported",
+        G_TYPE_BOOLEAN, TRUE, NULL);
+#ifdef HAVE_WAYLAND_KMS
+    gst_buffer_pool_config_set_allocator (config, NULL, &params);
+#endif
     if (!gst_buffer_pool_set_config (pool, config))
       goto config_failed;
   }
   if (pool) {
     gst_query_add_allocation_pool (query, pool, size, 2, 0);
+    /*
+     * Add the default allocator for the plugins that can't use dmabuf
+     * descriptors.
+     */
+    gst_query_add_allocation_param (query, gst_allocator_find (NULL), &params);
+
+#ifdef HAVE_WAYLAND_KMS
+    allocator = gst_dmabuf_allocator_new ();
+    gst_query_add_allocation_param (query, allocator, &params);
+    gst_object_unref (allocator);
+#endif
     gst_object_unref (pool);
   }
 
@@ -781,6 +820,107 @@ done:
   }
 }
 
+#ifdef HAVE_WAYLAND_KMS
+static gboolean
+gst_wayland_sink_query (GstBaseSink * bsink, GstQuery * query)
+{
+  GstWaylandSink *sink = GST_WAYLAND_SINK (bsink);
+  gboolean ret = FALSE;
+
+  GST_LOG_OBJECT (sink, "gst_wayland_sink_query");
+
+  switch (GST_QUERY_TYPE (query)) {
+    case GST_QUERY_CUSTOM:
+    {
+      GstWaylandBufferPool *wpool;
+      const GstStructure *structure;
+      GstStructure *str_writable;
+      gint dmabuf[GST_VIDEO_MAX_PLANES] = { 0 };
+      GstAllocator *allocator;
+      gint width, height;
+      gint stride[GST_VIDEO_MAX_PLANES] = { 0 };
+      const gchar *str;
+      const GValue *p_val;
+      GValue val = { 0, };
+      GstVideoFormat format;
+      GstBuffer *buffer;
+      GArray *dmabuf_array;
+      GArray *stride_array;
+      gint n_planes;
+      gint i;
+
+      wpool = GST_WAYLAND_BUFFER_POOL_CAST (sink->pool);
+
+      structure = gst_query_get_structure (query);
+      if (structure == NULL
+          || !gst_structure_has_name (structure,
+              "videosink_buffer_creation_request")) {
+        GST_LOG_OBJECT (sink, "not a videosink_buffer_creation_request query");
+        break;
+      }
+
+      GST_DEBUG_OBJECT (sink,
+          "received a videosink_buffer_creation_request query");
+
+      gst_structure_get (structure, "width", G_TYPE_INT, &width,
+          "height", G_TYPE_INT, &height, "stride", G_TYPE_ARRAY, &stride_array,
+          "dmabuf", G_TYPE_ARRAY, &dmabuf_array,
+          "n_planes", G_TYPE_INT, &n_planes,
+          "allocator", G_TYPE_POINTER, &p_val,
+          "format", G_TYPE_STRING, &str, NULL);
+
+      allocator = (GstAllocator *) g_value_get_pointer (p_val);
+      if (allocator == NULL) {
+        GST_WARNING_OBJECT (sink,
+            "an invalid allocator in videosink_buffer_creation_request query");
+        break;
+      }
+
+      format = gst_video_format_from_string (str);
+      if (format == GST_VIDEO_FORMAT_UNKNOWN) {
+        GST_WARNING_OBJECT (sink,
+            "invalid color format in videosink_buffer_creation_request query");
+        break;
+      }
+
+      for (i = 0; i < n_planes; i++) {
+        dmabuf[i] = g_array_index (dmabuf_array, gint, i);
+        stride[i] = g_array_index (stride_array, gint, i);
+        GST_DEBUG_OBJECT (sink, "plane:%d dmabuf:%d stride:%d\n", i, dmabuf[i],
+            stride[i]);
+      }
+
+      GST_DEBUG_OBJECT (sink,
+          "videosink_buffer_creation_request query param: width:%d height:%d allocator:%p format:%s",
+          width, height, allocator, str);
+
+      buffer = gst_wayland_buffer_pool_create_buffer_from_dmabuf (wpool,
+          dmabuf, allocator, width, height, stride, format, n_planes);
+      if (buffer == NULL) {
+        GST_WARNING_OBJECT (sink,
+            "failed to create a buffer from videosink_buffer_creation_request query");
+        break;
+      }
+
+      g_value_init (&val, GST_TYPE_BUFFER);
+      gst_value_set_buffer (&val, buffer);
+      gst_buffer_unref (buffer);
+
+      str_writable = gst_query_writable_structure (query);
+      gst_structure_set_value (str_writable, "buffer", &val);
+
+      ret = TRUE;
+      break;
+    }
+    default:
+      ret = GST_BASE_SINK_CLASS (parent_class)->query (bsink, query);
+      break;
+  }
+
+  return ret;
+}
+#endif
+
 static void
 gst_wayland_sink_videooverlay_init (GstVideoOverlayInterface * iface)
 {
diff --git a/ext/wayland/waylandpool.c b/ext/wayland/waylandpool.c
index de20602..238c41b 100644
--- a/ext/wayland/waylandpool.c
+++ b/ext/wayland/waylandpool.c
@@ -57,6 +57,13 @@ static void
 gst_wl_meta_free (GstWlMeta * meta, GstBuffer * buffer)
 {
   GST_DEBUG ("destroying wl_buffer %p", meta->wbuffer);
+#ifdef HAVE_WAYLAND_KMS
+  if (meta->kms_bo) {
+    if (meta->data)
+      kms_bo_unmap (meta->kms_bo);
+    kms_bo_destroy (&meta->kms_bo);
+  }
+#endif
   wl_buffer_destroy (meta->wbuffer);
 }
 
@@ -76,6 +83,95 @@ gst_wl_meta_get_info (void)
   return wl_meta_info;
 }
 
+#ifdef HAVE_WAYLAND_KMS
+typedef struct
+{
+  uint32_t wl_format;
+  GstVideoFormat gst_format;
+} wl_VideoFormat;
+
+static const wl_VideoFormat formats[] = {
+#if G_BYTE_ORDER == G_BIG_ENDIAN
+  {WL_SHM_FORMAT_XRGB8888, GST_VIDEO_FORMAT_xRGB},
+  {WL_SHM_FORMAT_ARGB8888, GST_VIDEO_FORMAT_ARGB},
+#else
+  {WL_SHM_FORMAT_XRGB8888, GST_VIDEO_FORMAT_BGRx},
+  {WL_SHM_FORMAT_ARGB8888, GST_VIDEO_FORMAT_BGRA},
+#endif
+};
+
+static uint32_t
+gst_wayland_format_to_wl_format (GstVideoFormat format)
+{
+  guint i;
+
+  for (i = 0; i < G_N_ELEMENTS (formats); i++)
+    if (formats[i].gst_format == format)
+      return formats[i].wl_format;
+
+  GST_WARNING ("wayland video format not found");
+  return -1;
+}
+
+static void
+wayland_buffer_release (void *data, struct wl_buffer *buffer)
+{
+  GstBuffer *buf = (GstBuffer *) data;
+  gst_buffer_unref (buf);
+}
+
+static const struct wl_buffer_listener wayland_buffer_listener = {
+  .release = wayland_buffer_release
+};
+
+GstBuffer *
+gst_wayland_buffer_pool_create_buffer_from_dmabuf (GstWaylandBufferPool * wpool,
+    gint dmabuf[GST_VIDEO_MAX_PLANES], GstAllocator * allocator, gint width,
+    gint height, gint in_stride[GST_VIDEO_MAX_PLANES], GstVideoFormat format,
+    gint n_planes)
+{
+  GstBuffer *buffer;
+  GstWlMeta *wmeta;
+  GstWlDisplay *display;
+  gsize offset[GST_VIDEO_MAX_PLANES] = { 0 };
+  gint stride[GST_VIDEO_MAX_PLANES] = { 0 };
+  gint i;
+
+  display = wpool->display;
+
+  buffer = gst_buffer_new ();
+
+  wmeta = (GstWlMeta *) gst_buffer_add_meta (buffer, GST_WL_META_INFO, NULL);
+  wmeta->display = gst_object_ref (display);
+
+  wmeta->wbuffer =
+      wl_kms_create_mp_buffer (display->kms, width, height,
+      gst_wayland_format_to_wl_format (format), dmabuf[0], in_stride[0],
+      dmabuf[1], in_stride[1], dmabuf[2], in_stride[2]);
+  wl_proxy_set_queue ((struct wl_proxy *) wmeta->wbuffer,
+      display->queue);
+  wl_buffer_add_listener (wmeta->wbuffer, &wayland_buffer_listener, buffer);
+
+  for (i = 0; i < n_planes; i++) {
+    gst_buffer_append_memory (buffer,
+        gst_dmabuf_allocator_alloc (allocator, dmabuf[i], 0));
+
+    stride[i] = in_stride[i];
+  }
+
+  wmeta->data = NULL;
+  wmeta->kms_bo = NULL;
+
+  gst_buffer_add_video_meta_full (buffer, GST_VIDEO_FRAME_FLAG_NONE, format,
+      width, height, n_planes, offset, stride);
+
+  /* To avoid deattaching meta data when a buffer returns to the buffer pool */
+  GST_META_FLAG_SET (wmeta, GST_META_FLAG_POOLED);
+
+  return buffer;
+}
+#endif
+
 /* bufferpool */
 static void gst_wayland_buffer_pool_finalize (GObject * object);
 static gboolean gst_wayland_buffer_pool_set_config (GstBufferPool * pool,
@@ -109,6 +205,9 @@ gst_wayland_buffer_pool_init (GstWaylandBufferPool * self)
   gst_video_info_init (&self->info);
   g_mutex_init (&self->buffers_map_mutex);
   self->buffers_map = g_hash_table_new (g_direct_hash, g_direct_equal);
+#ifdef HAVE_WAYLAND_KMS
+  self->kms = NULL;
+#endif
 }
 
 static void
@@ -203,8 +302,17 @@ static gboolean
 gst_wayland_buffer_pool_set_config (GstBufferPool * pool, GstStructure * config)
 {
   GstWaylandBufferPool *self = GST_WAYLAND_BUFFER_POOL_CAST (pool);
+#ifdef HAVE_WAYLAND_KMS
+  GstAllocationParams params;
+#endif
   GstCaps *caps;
 
+#ifdef HAVE_WAYLAND_KMS
+  if (self->allocator)
+    gst_object_unref (self->allocator);
+  self->allocator = NULL;
+#endif
+
   if (!gst_buffer_pool_config_get_params (config, &caps, NULL, NULL, NULL))
     goto wrong_config;
 
@@ -218,11 +326,26 @@ gst_wayland_buffer_pool_set_config (GstBufferPool * pool, GstStructure * config)
   GST_LOG_OBJECT (pool, "%dx%d, caps %" GST_PTR_FORMAT,
       GST_VIDEO_INFO_WIDTH (&self->info), GST_VIDEO_INFO_HEIGHT (&self->info),
       caps);
+#ifdef HAVE_WAYLAND_KMS
+  if (!gst_buffer_pool_config_get_allocator (config, &self->allocator,
+                                             &params))
+    goto wrong_allocator;
+
+  if (self->allocator)
+    gst_object_ref (self->allocator);
+#endif
 
   /*Fixme: Enable metadata checking handling based on the config of pool */
 
   return GST_BUFFER_POOL_CLASS (parent_class)->set_config (pool, config);
   /* ERRORS */
+#ifdef HAVE_WAYLAND_KMS
+wrong_allocator:
+  {
+    GST_WARNING_OBJECT (pool, "no allocator");
+    return FALSE;
+  }
+#endif
 wrong_config:
   {
     GST_WARNING_OBJECT (pool, "invalid config");
@@ -311,8 +434,133 @@ gst_wayland_buffer_pool_stop (GstBufferPool * pool)
   return GST_BUFFER_POOL_CLASS (parent_class)->stop (pool);
 }
 
+#ifdef HAVE_WAYLAND_KMS
+static GstWlMeta *
+gst_buffer_add_wayland_meta_kms (GstBuffer * buffer,
+    GstWaylandBufferPool * wpool)
+{
+  GstWlMeta *wmeta;
+  GstWlDisplay *display;
+  gsize offset[GST_VIDEO_MAX_PLANES] = { 0 };
+  gint stride[GST_VIDEO_MAX_PLANES] = { 0 };
+  gint err;
+  void *data = NULL;
+  guint32 handle;
+  gint dmabuf_fd;
+  unsigned attr[] = {
+    KMS_BO_TYPE, KMS_BO_TYPE_SCANOUT_X8R8G8B8,
+    KMS_WIDTH, 0,
+    KMS_HEIGHT, 0,
+    KMS_TERMINATE_PROP_LIST
+  };
+
+  display = wpool->display;
+
+  attr[3] = ((wpool->info.width + 31) >> 5) << 5;
+  attr[5] = wpool->info.height;
+
+  wmeta = (GstWlMeta *) gst_buffer_add_meta (buffer, GST_WL_META_INFO, NULL);
+  wmeta->display = gst_object_ref (display);
+
+  err = kms_bo_create (wpool->kms, attr, &wmeta->kms_bo);
+  if (err) {
+    GST_ERROR ("Failed to create kms bo");
+    return NULL;
+  }
+
+  kms_bo_get_prop (wmeta->kms_bo, KMS_PITCH, (guint *) & stride[0]);
+
+  wmeta->size = stride[0] * wpool->info.height;
+
+  kms_bo_get_prop (wmeta->kms_bo, KMS_HANDLE, &handle);
+
+  err = drmPrimeHandleToFD (wpool->display->drm_fd, handle, DRM_CLOEXEC,
+      &dmabuf_fd);
+  if (err) {
+    GST_ERROR ("drmPrimeHandleToFD failed. %s\n", strerror (errno));
+    return NULL;
+  }
+
+  wmeta->wbuffer = wl_kms_create_buffer (wpool->display->kms, dmabuf_fd,
+      wpool->info.width, wpool->info.height, stride[0], WL_KMS_FORMAT_ARGB8888, 0);
+
+  if (wpool->allocator &&
+      g_strcmp0 (wpool->allocator->mem_type, GST_ALLOCATOR_DMABUF) == 0) {
+    gst_buffer_append_memory (buffer,
+        gst_dmabuf_allocator_alloc (wpool->allocator, dmabuf_fd, wmeta->size));
+
+    wmeta->data = NULL;
+  } else {
+    err = kms_bo_map (wmeta->kms_bo, &data);
+    if (err) {
+      GST_ERROR ("Failed to map kms bo");
+      return NULL;
+    }
+
+    wmeta->data = data;
+
+    gst_buffer_append_memory (buffer,
+        gst_memory_new_wrapped (GST_MEMORY_FLAG_NO_SHARE, data,
+            wmeta->size, 0, wmeta->size, NULL, NULL));
+  }
+
+  gst_buffer_add_video_meta_full (buffer, GST_VIDEO_FRAME_FLAG_NONE,
+      GST_VIDEO_FORMAT_BGRA, (int) wpool->info.width, (int) wpool->info.height, 1, offset,
+      stride);
+
+  return wmeta;
+}
+
 static GstFlowReturn
-gst_wayland_buffer_pool_alloc (GstBufferPool * pool, GstBuffer ** buffer,
+gst_wayland_buffer_pool_alloc_kms (GstBufferPool * pool, GstBuffer ** buffer,
+    GstBufferPoolAcquireParams * params)
+{
+  GstWaylandBufferPool *self = GST_WAYLAND_BUFFER_POOL_CAST (pool);
+  gint width, height, stride;
+  gsize size;
+  enum wl_shm_format format;
+  GstWlMeta *meta;
+
+  width = GST_VIDEO_INFO_WIDTH (&self->info);
+  height = GST_VIDEO_INFO_HEIGHT (&self->info);
+  stride = GST_VIDEO_INFO_PLANE_STRIDE (&self->info, 0);
+  size = GST_VIDEO_INFO_SIZE (&self->info);
+  format =
+      gst_video_format_to_wayland_format (GST_VIDEO_INFO_FORMAT (&self->info));
+
+  GST_DEBUG_OBJECT (self, "KMS: allocating buffer of size %" G_GSSIZE_FORMAT
+      " (%d x %d, stride %d), format %s", size, width, height, stride,
+      gst_wayland_format_to_string (format));
+
+  /* create buffer and its metadata object */
+  *buffer = gst_buffer_new ();
+  meta = gst_buffer_add_wayland_meta_kms (*buffer, self);
+  if (meta == NULL)
+    goto no_buffer;
+
+  meta->pool = self;
+  meta->used_by_compositor = FALSE;
+
+  /* configure listening to wl_buffer.release */
+  g_mutex_lock (&self->buffers_map_mutex);
+  g_hash_table_insert (self->buffers_map, meta->wbuffer, *buffer);
+  g_mutex_unlock (&self->buffers_map_mutex);
+
+  wl_buffer_add_listener (meta->wbuffer, &buffer_listener, self);
+
+  return GST_FLOW_OK;
+
+  /* ERROR */
+no_buffer:
+  {
+    GST_WARNING_OBJECT (pool, "can't create buffer");
+    return GST_FLOW_ERROR;
+  }
+}
+#endif /* HAVE_WAYLAND_KMS */
+
+static GstFlowReturn
+gst_wayland_buffer_pool_alloc_shm (GstBufferPool * pool, GstBuffer ** buffer,
     GstBufferPoolAcquireParams * params)
 {
   GstWaylandBufferPool *self = GST_WAYLAND_BUFFER_POOL_CAST (pool);
@@ -330,7 +578,7 @@ gst_wayland_buffer_pool_alloc (GstBufferPool * pool, GstBuffer ** buffer,
   format =
       gst_video_format_to_wayland_format (GST_VIDEO_INFO_FORMAT (&self->info));
 
-  GST_DEBUG_OBJECT (self, "Allocating buffer of size %" G_GSSIZE_FORMAT
+  GST_DEBUG_OBJECT (self, "SHM: allocating buffer of size %" G_GSSIZE_FORMAT
       " (%d x %d, stride %d), format %s", size, width, height, stride,
       gst_wayland_format_to_string (format));
 
@@ -372,6 +620,22 @@ no_buffer:
   }
 }
 
+static GstFlowReturn
+gst_wayland_buffer_pool_alloc (GstBufferPool * pool, GstBuffer ** buffer,
+    GstBufferPoolAcquireParams * params)
+{
+  GstWaylandBufferPool *self = GST_WAYLAND_BUFFER_POOL_CAST (pool);
+
+#ifdef HAVE_WAYLAND_KMS
+  if (self->display->drm_fd >= 0)
+    return gst_wayland_buffer_pool_alloc_kms(pool, buffer, params);
+  else
+    return gst_wayland_buffer_pool_alloc_shm(pool, buffer, params);
+#else
+  return gst_wayland_buffer_pool_alloc_shm(pool, buffer, params);
+#endif
+}
+
 GstBufferPool *
 gst_wayland_buffer_pool_new (GstWlDisplay * display)
 {
@@ -381,5 +645,12 @@ gst_wayland_buffer_pool_new (GstWlDisplay * display)
   pool = g_object_new (GST_TYPE_WAYLAND_BUFFER_POOL, NULL);
   pool->display = g_object_ref (display);
 
+#ifdef HAVE_WAYLAND_KMS
+  if (kms_create (pool->display->drm_fd, &pool->kms)) {
+    GST_WARNING_OBJECT (pool, "kms_create failed");
+    return NULL;
+  }
+#endif
+
   return GST_BUFFER_POOL_CAST (pool);
 }
diff --git a/ext/wayland/waylandpool.h b/ext/wayland/waylandpool.h
index ad5020b..3d8c995 100644
--- a/ext/wayland/waylandpool.h
+++ b/ext/wayland/waylandpool.h
@@ -48,12 +48,26 @@ const GstMetaInfo * gst_wl_meta_get_info (void);
 
 #define gst_buffer_get_wl_meta(b) ((GstWlMeta*)gst_buffer_get_meta((b),GST_WL_META_API_TYPE))
 
+#ifdef HAVE_WAYLAND_KMS
+GstBuffer * gst_wayland_buffer_pool_create_buffer_from_dmabuf (
+    GstWaylandBufferPool * wpool, gint dmabuf[GST_VIDEO_MAX_PLANES],
+    GstAllocator *allocator, gint width, gint height,
+    gint in_stride[GST_VIDEO_MAX_PLANES], GstVideoFormat format, gint n_planes);
+#endif
+
 struct _GstWlMeta {
   GstMeta meta;
+  GstWlDisplay *display;
 
   GstWaylandBufferPool *pool;
   struct wl_buffer *wbuffer;
   gboolean used_by_compositor;
+  /* check if we need here */
+  void *data;
+  size_t size;
+#ifdef HAVE_WAYLAND_KMS
+  struct kms_bo *kms_bo;
+#endif
 };
 
 /* buffer pool */
@@ -73,6 +87,11 @@ struct _GstWaylandBufferPool
 
   GMutex buffers_map_mutex;
   GHashTable *buffers_map;
+
+#ifdef HAVE_WAYLAND_KMS
+  struct kms_driver *kms;
+  GstAllocator *allocator;
+#endif
 };
 
 struct _GstWaylandBufferPoolClass
diff --git a/ext/wayland/wldisplay.c b/ext/wayland/wldisplay.c
index 46efab9..03d6c50 100644
--- a/ext/wayland/wldisplay.c
+++ b/ext/wayland/wldisplay.c
@@ -45,6 +45,10 @@ gst_wl_display_init (GstWlDisplay * self)
 {
   self->formats = g_array_new (FALSE, FALSE, sizeof (uint32_t));
   self->wl_fd_poll = gst_poll_new (TRUE);
+#ifdef HAVE_WAYLAND_KMS
+  self->support_fmt_list = g_array_new (FALSE, FALSE, sizeof (uint32_t));
+  self->drm_fd = -1;
+#endif
 }
 
 static void
@@ -59,6 +63,9 @@ gst_wl_display_finalize (GObject * gobject)
 
   g_array_unref (self->formats);
   gst_poll_free (self->wl_fd_poll);
+#ifdef HAVE_WAYLAND_KMS
+  g_array_unref (self->support_fmt_list);
+#endif
 
   if (self->shm)
     wl_shm_destroy (self->shm);
@@ -83,6 +90,11 @@ gst_wl_display_finalize (GObject * gobject)
     wl_display_disconnect (self->display);
   }
 
+#ifdef HAVE_WAYLAND_KMS
+  if (self->drm_fd >= 0)
+    close(self->drm_fd);
+#endif
+
   G_OBJECT_CLASS (gst_wl_display_parent_class)->finalize (gobject);
 }
 
@@ -129,6 +141,48 @@ static const struct wl_shm_listener shm_listener = {
   shm_format
 };
 
+#ifdef HAVE_WAYLAND_KMS
+static void
+kms_device (void *data, struct wl_kms *kms, const char *device)
+{
+  GstWlDisplay *self = data;
+  drm_magic_t magic;
+
+  if ((self->drm_fd = open (device, O_RDWR | O_CLOEXEC)) < 0) {
+    GST_ERROR ("%s open failed %d", device, errno);
+    return;
+  }
+
+  drmGetMagic (self->drm_fd, &magic);
+  wl_kms_authenticate (self->kms, magic);
+}
+
+static void
+kms_format (void *data, struct wl_kms *wl_shm, uint32_t format)
+{
+  GstWlDisplay *self = data;
+
+  g_array_append_val (self->support_fmt_list, format);
+}
+
+static void
+kms_handle_authenticated (void *data, struct wl_kms *kms)
+{
+  GstWlDisplay *self = data;
+  GST_DEBUG ("kms_handle_authenticated(%p, %p)", data, kms);
+
+  GST_DEBUG ("wl_kms has been authenticated");
+
+  self->authenticated = TRUE;
+}
+
+static const struct wl_kms_listener kms_listenter = {
+  .device = kms_device,
+  .format = kms_format,
+  .authenticated = kms_handle_authenticated
+};
+#endif
+
 static void
 registry_handle_global (void *data, struct wl_registry *registry,
     uint32_t id, const char *interface, uint32_t version)
@@ -148,6 +202,11 @@ registry_handle_global (void *data, struct wl_registry *registry,
     wl_shm_add_listener (self->shm, &shm_listener, self);
   } else if (g_strcmp0 (interface, "wl_scaler") == 0) {
     self->scaler = wl_registry_bind (registry, id, &wl_scaler_interface, 2);
+#ifdef HAVE_WAYLAND_KMS
+  } else if (g_strcmp0 (interface, "wl_kms") == 0) {
+    self->kms = wl_registry_bind (registry, id, &wl_kms_interface, version);
+    wl_kms_add_listener (self->kms, &kms_listenter, self);
+#endif
   }
 }
 
@@ -252,6 +311,9 @@ gst_wl_display_new_existing (struct wl_display * display,
   VERIFY_INTERFACE_EXISTS (shell, "wl_shell");
   VERIFY_INTERFACE_EXISTS (shm, "wl_shm");
   VERIFY_INTERFACE_EXISTS (scaler, "wl_scaler");
+#ifdef HAVE_WAYLAND_KMS
+  VERIFY_INTERFACE_EXISTS (kms, "wl_kms");
+#endif
 
 #undef VERIFY_INTERFACE_EXISTS
 
diff --git a/ext/wayland/wldisplay.h b/ext/wayland/wldisplay.h
index 0224406..3225f1d 100644
--- a/ext/wayland/wldisplay.h
+++ b/ext/wayland/wldisplay.h
@@ -23,8 +23,19 @@
 
 #include <gst/gst.h>
 #include <wayland-client.h>
+#include <fcntl.h>
+#include <unistd.h>
 #include "scaler-client-protocol.h"
 
+#ifdef HAVE_WAYLAND_KMS
+#include <xf86drm.h>
+
+#include "drm.h"
+#include "libkms.h"
+#include "wayland-kms-client-protocol.h"
+#include "gst/allocators/gstdmabuf.h"
+#endif
+
 G_BEGIN_DECLS
 
 #define GST_TYPE_WL_DISPLAY                  (gst_wl_display_get_type ())
@@ -52,6 +63,12 @@ struct _GstWlDisplay
   struct wl_shell *shell;
   struct wl_shm *shm;
   struct wl_scaler *scaler;
+#ifdef HAVE_WAYLAND_KMS
+  struct wl_kms *kms;
+  GArray *support_fmt_list;
+  gint drm_fd;
+  gboolean authenticated;
+#endif
   GArray *formats;
 
   /* private */
-- 
1.7.10.4

