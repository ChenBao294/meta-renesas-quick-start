From 775113f4c4d9cd2f0069896b9808d0ef1ad7f818 Mon Sep 17 00:00:00 2001
From: Mikhail Ivanov <mikhail.ivanov@cogentembedded.com>
Date: Tue, 10 Nov 2015 14:03:24 +0300
Subject: [PATCH] add kernel cache in order to workaround kernel objects
 leaking

---
 modules/ocl/src/cl_operations.cpp | 61 +++++++++++++++++++++++++++++++++------
 1 file changed, 52 insertions(+), 9 deletions(-)

diff --git a/modules/ocl/src/cl_operations.cpp b/modules/ocl/src/cl_operations.cpp
index 0b93407..f18e13e 100644
--- a/modules/ocl/src/cl_operations.cpp
+++ b/modules/ocl/src/cl_operations.cpp
@@ -324,18 +324,61 @@ cl_kernel openCLGetKernelFromSource(const Context *ctx, const cv::ocl::ProgramEn
     return openCLGetKernelFromSource(ctx, source, kernelName, NULL);
 }
 
+class KernelCache
+{
+private:
+    std::map<string, cl_kernel> kernelCache;
+    cv::Mutex mutex;
+public:
+    ~KernelCache()
+    {
+        std::map<string, cl_kernel>::iterator it;
+        for (it = kernelCache.begin(); it != kernelCache.end(); ++it)
+        {
+            cl_kernel kernel = (*it).second;
+            openCLSafeCall(clReleaseKernel(kernel));
+        }
+    }
+    static KernelCache& getKernelCache()
+    {
+        static KernelCache kernelCache;
+        return kernelCache;
+    }
+    cl_kernel getKernel(const Context *ctx, const cv::ocl::ProgramEntry* source, string kernelName,
+                        const char *build_options)
+    {
+        cl_kernel kernel;
+        stringstream kernelId;
+        kernelId << kernelName << endl;
+        if (source->name)
+            kernelId << source->name << endl;
+        kernelId << getClContext(ctx) << endl;
+        if (build_options)
+            kernelId << build_options << endl;
+
+        cv::AutoLock lock(mutex);
+        if (kernelCache.find(kernelId.str()) != kernelCache.end())
+            kernel = kernelCache[kernelId.str()];
+        else
+        {
+            cl_int status = 0;
+            CV_Assert(ProgramCache::getProgramCache() != NULL);
+            cl_program program = ProgramCache::getProgramCache()->getProgram(ctx, source, build_options);
+            CV_Assert(program != NULL);
+            kernel = clCreateKernel(program, kernelName.c_str(), &status);
+            kernelCache[kernelId.str()] = kernel;
+            openCLVerifyCall(status);
+            openCLVerifyCall(clReleaseProgram(program));
+        }
+        openCLSafeCall(clRetainKernel(kernel));
+        return kernel;
+    }
+};
+
 cl_kernel openCLGetKernelFromSource(const Context *ctx, const cv::ocl::ProgramEntry* source, string kernelName,
                                     const char *build_options)
 {
-    cl_kernel kernel;
-    cl_int status = 0;
-    CV_Assert(ProgramCache::getProgramCache() != NULL);
-    cl_program program = ProgramCache::getProgramCache()->getProgram(ctx, source, build_options);
-    CV_Assert(program != NULL);
-    kernel = clCreateKernel(program, kernelName.c_str(), &status);
-    openCLVerifyCall(status);
-    openCLVerifyCall(clReleaseProgram(program));
-    return kernel;
+    return KernelCache::getKernelCache().getKernel(ctx, source, kernelName, build_options);
 }
 
 void openCLVerifyKernel(const Context *ctx, cl_kernel kernel, size_t *localThreads)
-- 
1.9.1

